{"version":3,"sources":["components/ImageCard/index.js","components/Wrapper/index.js","components/Header/index.js","components/Navbar/index.js","App.js","serviceWorker.js","index.js"],"names":["ImageCard","props","react_default","a","createElement","className","onClick","countImage","id","src","image","alt","name","Wrapper","children","Header","Navbar","href","score","topscore","App","state","images","restartGame","_this","setState","forEach","counter","shuffleImages","array","i","length","randomIndex","Math","floor","random","tempValue","selectedImage","currScore","_this2","this","components_Navbar","components_Header","components_Wrapper","map","components_ImageCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ec360a3b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\"\n\nfunction ImageCard(props) {\n    return (\n        <span className=\"image\" onClick={() => props.countImage(props.id)}>\n            <div className=\"img-container text-center\">\n                <img src={props.image} alt={props.name} />\n            </div>\n        </span>\n    );\n}\n\nexport default ImageCard;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\"\n\nfunction Header(props) {\n    return (\n        <div className=\"jumbotron text-center\">\n            <h1>Clicky Game</h1>\n            <h3>Click on an image to earn points, but don't click on any more than once!</h3>\n        </div>\n    );\n}\n\nexport default Header;","import React from \"react\";\nimport \"./style.css\"\n\nfunction Navbar(props) {\n    return (\n        <div className=\"navbar\">\n            <h3>\n                <a href=\"/clickygame\">ClickyGame</a>\n            </h3>\n            <div className=\"scores\">\n                <h3>\n                    Score : {props.score} | Top Score : {props.topscore}\n                </h3>\n            </div>\n        </div>\n    );\n}\n\nexport default Navbar;","import React, { Component } from 'react';\nimport ImageCard from \"./components/ImageCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport Navbar from \"./components/Navbar\";\nimport images from \"./images.json\";\nimport './App.css';\n\nclass App extends Component {\n\n  // Set the state with images.json object and default values of game start\n  state = {\n    images: images,\n    score: 0,\n    topscore: 0\n  };\n\n  restartGame = () => {\n    // Rewrite the top score if the current score is higher\n    if (this.state.score > this.state.topscore) {\n      this.setState({ topscore: this.state.score })\n    }\n    // reset the current score back to 0\n    this.setState({ score: 0 });\n    // reset each image's clicked counter back to 0\n    this.state.images.forEach(image => { image.counter = 0 })\n    // Do I even need to return anything?\n    return true;\n  };\n\n  // Function to shuffle the order of the images\n  shuffleImages = array => {\n    for (var i = array.length - 1; i > 0; i--) {\n      var randomIndex = Math.floor(Math.random() * i);\n      // store array the current index's value temporarily\n      var tempValue = array[i];\n      // switch out randomIndex's value to current index's value\n      array[i] = array[randomIndex];\n      // change randomIndex's value to tempValue\n      array[randomIndex] = tempValue;\n    }\n    return array;\n  }\n\n  // Function to add a count to a clicked image and shuffle, or call restartGame if counter is already 1\n  countImage = id => {\n    // empty variable to store image selected\n    let selectedImage;\n    // loop through the array of images\n    for (let i = 0; i < this.state.images.length; i++) {\n      // to find the image with the matching id that was clicked\n      if (this.state.images[i].id === id) {\n        // then store that image as the selected image\n        selectedImage = this.state.images[i];\n      }\n    }\n    // If the counter of the selected image is still 0\n    if (selectedImage.counter !== 1) {\n      // store the new score in a variable\n      let currScore = this.state.score + 1;\n      // set the state of score to the new score\n      this.setState({ score: currScore });\n      // if the score is greater than the top score, then set the top score\n      if (this.state.topscore <= currScore) {\n        this.setState({ topscore: currScore });\n      }\n\n      // Add 1 to the counter of that selected image\n      selectedImage.counter = 1;\n\n      // shuffle the array and re-render\n      this.shuffleImages(this.state.images);\n    } else { // Otherwise restart the game because counter was already at 1\n      this.restartGame();\n    }\n\n\n    //return true;\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Navbar score={this.state.score} topscore={this.state.topscore}></Navbar>\n        <Header></Header>\n        <div className=\"row\">\n          <div className=\"col-md-12 text-center\">\n            <h1 className=\"title\">Alphabet Images</h1>\n          </div>\n        </div>\n        <Wrapper>\n          {this.state.images.map(images => (<ImageCard image={images.image}\n            countImage={this.countImage} id={images.id} key={images.id} />))}\n        </Wrapper >\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}